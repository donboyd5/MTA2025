---
output: html_document
editor_options: 
  chunk_output_type: console
---

{{< include _setup.qmd >}}

# Allocate QCEW data to establishment size groups

```{r}
#| label: get-data
#| output: false

qcshares <- readRDS(fs::path(PDINTERMEDIATE, "qcew_cbpshares.rds"))

# check sum
sum(qcshares$payroll)
readRDS(fs::path(PDINTERMEDIATE, "qmta_atoms.rds")) |> 
  filter(ownerf==1) |> 
  summarise(payroll=sum(payroll))

```

```{r}
#| label: long-file
#| output: false

qclong <- qcshares |> 
  pivot_longer(cols=n0_4:n1000_inf) |> 
  separate_wider_delim(name, delim = "_", names=c("elb", "eub"), cols_remove = FALSE) |> 
  mutate(elb = str_remove(elb, "n") |> as.integer(),
         eub = ifelse(eub=="inf", Inf, as.integer(eub)), # will generate a warning
         estabs_initial = estabs * value)

# verify that all shares add to 1
qclong |> 
  summarise(value=sum(value), .by=c(area, naics)) |> 
  mutate(diff=value - 1) |> 
  arrange(desc(abs(diff))) # good

qclong |> 
  summarise(estabs = first(estabs),
            estabs_initial=sum(estabs_initial), .by=c(area, naics)) |> 
  mutate(diff=estabs_initial - estabs) |> 
  arrange(desc(abs(diff))) # good

```

```{r}
#| label: optimization
#| output: false

source(fs::path(DMAIN, "R", "opt_functions.R"))

(n_workers <- parallel::detectCores() - 2) # leave 2 free
future::plan(future::multisession, workers=n_workers)

a <- proc.time()
qcew_allocated_nested <- qclong |> 
  nest(.by=c(area:payroll)) |> 
  mutate(
    # optres = purrr::pmap(
    optres = furrr::future_pmap(
      list(data, estabs, emp),
      \(data, estabs, emp)
      allocate(estabs_initial=data$estabs_initial,
               emptot = emp,
               estabs_tot = estabs),
      .progress = TRUE))
b <- proc.time()
b - a # about 35 seconds


saveRDS(qcew_allocated_nested, fs::path(PDINTERMEDIATE, "qcew_allocated_nested.rds")) # includes optimization results in optres

qcew_allocated_nested <- readRDS(fs::path(PDINTERMEDIATE, "qcew_allocated_nested.rds")) 

qcew_allocated <- qcew_allocated_nested |> 
  mutate(pay_emp = payroll / emp) |> 
  unnest(c(data, optres)) |> 
  select(-res) |> 
  mutate(gemp = gestabs * gemp_est,
         gpayroll = gemp * pay_emp)

saveRDS(qcew_allocated, fs::path(PDINTERMEDIATE, "qcew_allocated.rds"))


```

```{r}
#| label: check-results
#| output: true

qcew_allocated <- readRDS(fs::path(PDINTERMEDIATE, "qcew_allocated.rds"))

# summary(qcew_allocated |> select(-res))
# qcew_allocated |> select(-res) |> filter(is.na(gemp))
# 
# glimpse(qcew_allocated)

qcew_allocated |> 
  # select(-res) |> 
  summarise(payroll=first(payroll),
            gpayroll=sum(gpayroll, na.rm=TRUE),
            .by=c(area, naics, title)) |> 
  summarise(payroll=sum(payroll), 
            gpayroll=sum(gpayroll)) |> 
  mutate(dpayroll=gpayroll - payroll,
         dpct=dpayroll / payroll) |> 
  gt() |> 
  tab_header("QCEW 2023 reported private sector payroll and sum of 'atomistic' payroll across counties, industries, and employer size groups") |> 
  cols_label(payroll="payroll: reported", gpayroll="payroll: sum of details", dpayroll="sum of details minus reported", dpct="% difference from reported") |> 
  fmt_number(columns = contains("payroll"),
             decimals = 0) |> 
  fmt_percent(columns = dpct,
              decimals=4)

```

```{r}
#| label: cleanup
rm(list = ls())
```

```{r stop_here, echo=FALSE}
knitr::knit_exit()
```
