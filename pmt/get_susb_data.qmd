---
output: html_document
editor_options: 
  chunk_output_type: console
---

# TODO:

-   Forecast to 2025
-   Use spline to estimate payroll groups and then force fit to total payroll etc.
-   Splice onto QCEW for 2023
-   Use 2025 forecast to estimate tax

# Get Statistics of U.S. Businesses (SUSB) -- 2021 (latest)

SUSB links

-   https://www.census.gov/data/tables/2021/econ/susb/2021-susb-annual.html
-   https://www.census.gov/programs-surveys/susb/technical-documentation.html
-   https://www.census.gov/programs-surveys/susb/technical-documentation/methodology.html
-   http://www.census.gov/programs-surveys/susb/about/glossary.html
-   https://www2.census.gov/programs-surveys/susb/tables/2021/county_3digitnaics_2021.xlsx
-   https://www.census.gov/data/datasets/2021/econ/susb/2021-susb.html csv files, but not at the county level

D Withheld to avoid disclosing data for individual companies; data are included in higher level totals

G Low noise; cell value was changed by less than 2 percent by the application of noise

H Moderate noise; cell value was changed by 2 percent or more but less than 5 percent by the application of noise

J High noise; cell value was changed by 5 percent or more by the application of noise

S Withheld because estimate did not meet publication standards N Not available or not comparable

```{r}
#| label: setup
#| include: false

source(here::here("R", "libraries.r"))
source(here::here("R", "libraries_ts.r"))
source(here::here("R", "constants.r"))
source(here::here("R", "functions.r"))

library(zip)
library(lobstr)

```

## SUSB US-state with detailed firm-size groupings -- read from Excel and save

```{r}
#| label: get-susb-us-states

# https://www2.census.gov/programs-surveys/susb/tables/2021/us_state_naics_detailedsizes_2021.xlsx
fname <- "us_state_naics_detailedsizes_2021.xlsx"
susbdetail <- read_excel(fs::path(PDRAW, "susb", fname), skip=2)
glimpse(susbdetail)

susbdtl2 <- susbdetail |> 
  select(statefips=1,
         state=2,
         naics=3,
         description=4,
         firmsize=5,
         firms=6,
         estabs=7,
         emp=8,
         empnoise=9,
         payroll=10,
         paynoise=11) |> 
  mutate(payroll=payroll * 1000,
         fscode = str_sub(firmsize, 1, 2))

eststubs <- susbdtl2 |> 
  select(fscode, firmsize) |> 
  distinct() |> 
  # get upper and lower bounds
  mutate(
    fslb = case_when(
    fscode == "01" ~ "0",
    str_detect(firmsize, coll("<")) ~ "0", 
    str_detect(firmsize, coll("-")) ~ str_extract(firmsize, "[0-9,]+(?=\\-)"),
    str_detect(firmsize, coll("+")) ~ str_extract(firmsize, "[0-9,]+(?=\\+)"),
    .default = "00"),
    
    fsub = case_when(
    fscode == "01" ~ Inf,
    
    # caution: upper bound when firmsize has "<" is one lower than the < amount
    str_detect(firmsize, coll("<")) ~ 
      str_extract(firmsize, "(?<=<)\\d{1,3}(?:,\\d{3})*") |> 
      str_remove_all(",") |> 
      as.numeric() - 1,
    
    str_detect(firmsize, coll("-")) ~ 
      str_extract(firmsize, "(?<=-)\\d{1,3}(?:,\\d{3})*") |> 
      str_remove_all(",") |> 
      as.numeric(),
    
    str_detect(firmsize, coll("+")) ~ Inf,
    .default = 0),
    
    fslb = as.numeric(str_remove_all(fslb, ",")))
eststubs

susbdtl3 <- susbdtl2 |> 
  left_join(eststubs |> 
              select(-firmsize), 
            by=join_by(fscode))

saveRDS(susbdtl3, fs::path(PDINTERMEDIATE, "susb2021_usstate_details.rds"))

```

## SUSB Read and save MTA subset of the county SUSB data

### Get SUSB data for all counties in the US

```{r}
#| label: get-susb-counties
#| output: false
#| eval: true

fname <- "county_3digitnaics_2021.xlsx"
susb1 <- read_excel(fs::path(PDRAW, "susb", fname), skip=2)
glimpse(susb1)

# mappings for lower and upper bounds of firm size
sizelb <- c("1" = 0, "2" = 0, "3" = 20, "4" = 100, "5" = 500)
sizeub <- c("1" = Inf, "2" = 19, "3" = 99, "4" = 499, "5" = Inf)
cbind(sizelb, sizeub)

susb2 <- susb1 |> 
  select(statefips=1,
         state=2,
         cofips=3,
         county=4,
         naics=5,
         description=6,
         firmsize=7,
         firms=8,
         estabs=9,
         emp=10,
         empnoise=11,
         payroll=12,
         paynoise=13) |> 
  mutate(payroll=payroll * 1000,
         fscode = str_sub(firmsize, 1, 1),
         fslb = sizelb[fscode],
         fsub = sizeub[fscode])

glimpse(susb2)
count(susb2, fscode, firmsize, fslb, fsub) # note that we do not have the same number of recs per code!

saveRDS(susb2, fs::path(PDINTERMEDIATE, "susb2021_counties.rds"))

```

### Get MTA subset of the SUSB counties

```{r}
#| label: susb-mta
#| output: false

susb <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_counties.rds"))

susb |> 
  filter(state=="New York") |> 
  count(cofips, county)

mta <- susb |> 
  filter(state=="New York", paste0(statefips, cofips) %in% constants$mtafips) |> 
  mutate(mta=TRUE, 
         nyc=paste0(statefips, cofips) %in% constants$nycfips)

count(mta, nyc, county)
count(mta, naics, description)

saveRDS(mta, fs::path(PDINTERMEDIATE, "susb2021_mta.rds"))

```

## Fill in fine-grained firm size information using detailed ranges for NY state

```{r}
#| label: pre-process-nys-data

usstate <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_usstate_details.rds"))
glimpse(usstate)
count(usstate, statefips, state)

nys1 <- usstate |> 
  filter(statefips == "36")
count(nys1, firmsize)

nys1 |> 
  filter(naics=="99") # hmmm we only have a few sizes for 99

# create stubs to fill in missing values ----
# firm sizes
fsstubs <- nys1 |> 
  select(fscode, firmsize, fslb, fsub) |> 
  distinct() |> 
  # drop the total and subtotals
  filter(!fscode %in% c("01", "06", "19"))
fsstubs

# state data has 2-digit naics (including "--" and range  naics such as "31-33" Manufacturing)
naicsstubs <- nys1 |> 
  select(naics, description) |> 
  distinct()

stubs <- crossing(fsstubs, naicsstubs) |> 
  mutate(statefips = "36",
         state = "New York")
# we want to fill firmsize data for all cells in stubs

# create all-industries all-firm-sizes data with missing values for empty cells
nys2 <- stubs |> 
  left_join(nys1 |> 
              select(-c(firmsize, fslb, fsub, description, state)),
            by = join_by(fscode, naics, statefips)) |> 
  arrange(naics, fscode)

nys2 |> filter(is.na(firms)) # a few industries don't have data in all cells 
  
count(nys2, fscode, firmsize) # 23 mutually exclusive firm sizes
count(nys2, naics, description)  # 21 2-digit naics including --

# get percents for the non-missing value for each naics based on sum of nonmissing (so they add to 100) details
nys3 <- nys2 |> 
  select(-empnoise, -paynoise) |> 
  mutate(across(c(firms, estabs, emp, payroll), \(x) replace_na(x, 0))) |> 
  mutate(across(c(firms, estabs, emp, payroll), 
                list(pct = \(x) x / sum(x, na.rm=TRUE))),
         .by=naics)
nys3
summary(nys3)

# check that industry sums are 1
check <- nys3 |> 
  summarise(across(c(firms_pct, estabs_pct, emp_pct, payroll_pct), sum),
            .by=c(naics, description))
summary(check)

# save the filled out NY state data
saveRDS(nys3, fs::path(PDINTERMEDIATE, "susb2021_nys_shares.rds"))

```

## Use NYS detailed firmsize shares to fill in detailed firmsize data for MTA

```{r}
#| label: fill-mta-missing

mta <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_mta.rds"))
nys <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_nys_shares.rds"))

count(nys, fscode, firmsize)
count(mta, fscode, firmsize)
count(nys, naics, description)
count(mta, naics, description)

# create match between mta 3-digit naics and nys 2-digit naics
naics_group <- mta |> 
  select(naics) |> 
  distinct() |> 
  arrange(naics) |> 
  mutate(naics2=str_sub(naics, 1, 2),
         naics_group=case_when(
           naics2 %in% c("31", "32", "33") ~ "31-33",
           naics2 %in% c("44", "45") ~ "44-45",
           naics2 %in% c("48", "49") ~ "48-49",
           .default = naics2)) |> 
  select(-naics2)
ht(naics_group)

# prepare NYS data for matching
nys2 <- nys |> 
  filter(naics != "--") |> 
  mutate(fs_group = case_when(
    as.integer(fscode) %in% 2:5 ~ "<20 employees",
    as.integer(fscode) %in% 7:13 ~ "20-99 employees",
    as.integer(fscode) %in% 14:18 ~ "100-499 employees",
    as.integer(fscode) %in% 20:26 ~ "500+ employees",
  )) |> 
  rename(naics_group = naics)
count(nys2, fs_group, firmsize) |> arrange(firmsize)
count(nys2, naics_group, description)

# prepare MTA data for matching
mta2 <- mta |> 
  filter(naics != "--") |> 
  mutate(fs_group = str_sub(firmsize, 4, -1)) |> 
  select(cofips, county, naics, description, fs_group, firmsize, firms, estabs, emp, payroll, mta, nyc) |> 
  left_join(naics_group, by = join_by(naics))
count(mta2, fs_group, firmsize)
count(mta2, naics_group, naics, description)
glimpse(mta2)

# do the match
nysmta <- nys2 |> 
  select(naics_group, fs_group, fscode, firmsize, fslb, fsub, ends_with("_pct")) |>
  full_join(mta2 |> 
              select(cofips, county, naics_group, naics, description, fs_group, 
                     firms_grp=firms, estabs_grp=estabs, emp_grp=emp, payroll_grp=payroll,
                     mta, nyc), 
            by=join_by(naics_group, fs_group),
            relationship = "many-to-many") |> 
  filter(fs_group != "Total") |>
  mutate(
    firms = firms_grp * firms_pct / sum(firms_pct),
    estabs = estabs_grp * estabs_pct / sum(estabs_pct),
    emp = emp_grp * emp_pct / sum(emp_pct),
    payroll = payroll_grp * payroll_pct / sum(payroll_pct),
    .by=c(cofips, naics, fs_group)) |> 
  select(cofips, county, naics_group, naics, description, fs_group, fscode, firmsize, fslb, fsub, 
         firms, estabs, emp, payroll,
         ends_with("_grp"),
         ends_with("_pct"),
         mta, nyc) |> 
  arrange(cofips, naics_group, naics, fscode, fs_group)
count(nysmta, fscode, firmsize, fs_group)
count(nysmta, naics_group, naics, description)

# do some checks on nysmta ----
# check sums
nysmta |> 
  summarise(across(c(firms, estabs, emp, payroll), sum),
            across(ends_with("_grp"), first),
            across(ends_with("_pct"), sum),
            .by=c(cofips, naics, fs_group))

# check internal consistency
tmp <- nysmta |> 
  select(cofips, county, naics, description, firmsize, fslb, fsub, emp, firms, payroll) |> 
  mutate(ef=emp / firms) |> # emp / firm can be lower than fslb
  mutate(pay=payroll / emp,
         paypf=payroll / firms) |> 
  relocate(ef, pay, paypf, .after = fsub)
# note that emp / firm can be outside fslb, fsub but usually not far
  
nysmta |> 
  select(cofips, county, naics_group, naics, description, fs_group, firmsize, fslb, fsub, emp, firms, payroll, ends_with("grp"), ends_with("pct")) |> 
  mutate(ef=emp / firms) |> # emp / firm often is lower than fslb
  mutate(pay=payroll / emp,
         paypf=payroll / firms) |> 
  relocate(ef, pay, paypf, .after = fsub) |> 
  filter(cofips=="005", naics_group=="23") |> 
  write.xlsx(fs::path(PDINTERMEDIATE, "nysmta_checks.xlsx"))
 

tmp <- nysmta |> filter(is.na(fscode))

# fix: for large firm size, number of firms reported often is inconsistent with number of employees ----
# treat employment and payroll as reasonable and recalculate # of firms using lower bound of firm size range

nysmta_adj <- nysmta |> 
  # select(cofips, county, naics_group, naics, description, fs_group, firmsize, fslb, fsub, emp, firms, payroll, ends_with("grp"), ends_with("pct")) |> 
  mutate(empfirm = emp / firms) |> # emp / firm can be lower than fslb
  # recalculate # of firms using fslb lower bound of firm size range
  mutate(firms_adj = case_when(empfirm < fslb ~ emp / fslb,
                               empfirm > fsub ~ emp / fsub,
                               .default = firms),
         empfirm_adj = emp / firms_adj)|> 
  # adjust number of establishments proportionately
  mutate(estabs_adj = estabs * firms_adj / firms) |>
  relocate(empfirm, empfirm_adj, .after = fsub) |> 
  relocate(firms_adj, .after = firms) |> 
  relocate(estabs_adj, .after = estabs)

saveRDS(nysmta_adj, fs::path(PDINTERMEDIATE, "susb2021_nysmta_shares_adj.rds"))


nysmta_adj |> 
  filter(empfirm_adj < fslb | empfirm_adj > fsub)

nysmta_adj |> 
  summarise(across(c(firms, firms_adj, estabs, emp, payroll), sum),
            across(ends_with("_grp"), first),
            across(ends_with("_pct"), sum),
            .by=c(cofips, naics, fs_group))

tmp <- nysmta_adj |> 
  select(naics_group, naics, description) |>
  distinct()
  

```

```{r stop_here, echo=FALSE}
knitr::knit_exit()
```

## Quick and dirty \# firms and establishments and amount of payroll by firm size

```{r}
#| label: quick-dirty


nysmta_adj <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_nysmta_shares_adj.rds"))

count(nysmta_adj, naics_group, naics, description)

tabdata <- nysmta_adj |> 
  filter(nchar(naics) == 3) |>
  mutate(payfirm=payroll / firms_adj,
         paygroup=case_when(
           payfirm < 1.5e6 ~ "tier1",  # .11
           payfirm >= 1.5e6 & payfirm < 1.75e6 ~ "tier2", # .23
           payfirm >= 1.75e6 ~ "tier3", # .34 or .60
           is.na(payfirm) ~ "napayfirm",
           .default = "ERROR")) |>
  mutate(taxrate=case_when(
    paygroup == "tier1" ~ 0.0011,
    paygroup == "tier2" ~ 0.0023,
    paygroup == "tier3" & !nyc ~ 0.0034,
    paygroup == "tier3" & nyc ~ 0.0060,
    .default = 0)) |>
  mutate(tax=payroll * taxrate) |>
  summarise(n=n(),
            firms=sum(firms_adj, na.rm=TRUE),
            estabs=sum(estabs_adj, na.rm=TRUE),
            emp=sum(emp, na.rm=TRUE),
            payroll=sum(payroll, na.rm=TRUE),
            tax = sum(tax, na.rm=TRUE),
            .by=c(paygroup, nyc)) |> 
  filter(paygroup != "napayfirm") |>
  arrange(nyc, paygroup) |> 
  janitor::adorn_totals()

tabdata |> 
  gt() |> 
  fmt_number(columns=c(n, firms, estabs, emp)) |> 
  fmt_number(columns=c(payroll, tax),
             scale=1e-6,
             decimals=1)
  
# tabdata <- nysmta_adj |> 
#   mutate(payfirm=payroll / firms_adj,
#          paygroup=case_when(
#            payfirm < 1.5e6 ~ "tier1",  # .11
#            payfirm >= 1.5e6 & payfirm < 1.75e6 ~ "tier2", # .23
#            payfirm >= 1.75e6 ~ "tier3", # .34 or .60
#            is.na(payfirm) ~ "napayfirm",
#            .default = "ERROR")) |>
#   mutate(taxrate=case_when(
#     paygroup == "tier1" ~ 0.0011,
#     paygroup == "tier2" ~ 0.0023,
#     paygroup == "tier3" & !nyc ~ 0.0034,
#     paygroup == "tier3" & nyc ~ 0.0060,
#     .default = 0)) |>
#   mutate(tax=payroll * taxrate) |>
#   summarise(n=n(),
#             firms=sum(firms_adj, na.rm=TRUE),
#             estabs=sum(estabs_adj, na.rm=TRUE),
#             emp=sum(emp, na.rm=TRUE),
#             payroll=sum(payroll, na.rm=TRUE),
#             tax = sum(tax, na.rm=TRUE),
#             .by=c(paygroup)) |> 
#   filter(paygroup != "napayfirm") |>
#   arrange(paygroup) |> 
#   janitor::adorn_totals()

tabdata |> 
  gt() |> 
  fmt_number(columns=c(n, firms, estabs, emp)) |> 
  fmt_number(columns=c(payroll, tax),
             scale=1e-6,
             decimals=1)
  
```

## Explore 2021 SUSB data for the MTA region

What share of total MTA wages does NYC have by size of firm?

(A quick-and-dirty analysis for the MTA.)

```{r}
#| label: explore-mta

mta <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_mta.rds"))

mta |> 
  filter(naics=="--") |> 
  select(county, firmsize, firms, estabs, emp, payroll) |> 
  mutate(fe=firms / estabs,
         emppay = payroll / emp,
         avgfirmpay = payroll / firms) |>
  mutate(paypct = payroll / payroll[firmsize == "1: Total"],
         .by=county) |> 
  relocate(fe,.after = firmsize) |> 
  arrange(firmsize, county) |> 
  gt() |> 
  fmt_number(columns = c(4:9),
             decimals = 0) |> 
  fmt_percent(columns = paypct,
              decimals = 1)



nycshare <- mta |> 
  filter(naics=="--") |> 
  summarise(across(c(firms, estabs, emp, payroll), sum),
            .by=c(nyc, firmsize)) |> 
  mutate(nyc=ifelse(nyc, "nyc", "suburban"),
         qfirmpay=(payroll / firms) / 4,
         avgpay=payroll / emp)

nycshare |> 
  select(nyc, firmsize, qfirmpay) |> 
  pivot_wider(names_from = nyc, values_from = qfirmpay) |> 
  gt() |> 
  tab_header(html("Average MTA <strong>quarterly</strong> firm payroll by firm size in 2021, <strong>dollars</strong>"),
             subtitle="source=Statistics of U.S. Businesses (SUSB)") |> 
  fmt_number(columns = c(nyc, suburban),
             decimals = 0)

nycshare |> 
  select(firmsize, payroll, nyc) |> 
  pivot_wider(names_from = nyc, values_from = payroll) |> 
  mutate(total=nyc + suburban,
         nycpct=nyc / total) |> 
  gt() |> 
  tab_header(html("Total MTA payroll by firm size in 2021, $ billions, and NYC share of MTA"),
             subtitle="source=Statistics of U.S. Businesses (SUSB)") |> 
  fmt_number(columns = c(nyc, suburban, total),
             scale = 1e-9,
             decimals = 2) |> 
  fmt_percent(columns = nycpct,
              decimals = 1)

# cumulative  
nycshare |> 
  select(firmsize, payroll, nyc) |> 
  filter(!str_starts(firmsize, "1: Total")) |> 
  arrange(nyc, desc(firmsize)) |> 
  mutate(payroll=cumsum(payroll), .by=nyc) |> 
  pivot_wider(names_from = nyc, values_from = payroll) |> 
  arrange(firmsize) |> 
  mutate(total=nyc + suburban,
         nycpct=nyc / total) |> 
  gt() |> 
  tab_header(html("<strong>Reverse cumulative</strong> MTA payroll by firm size in 2021, $ billions, and NYC share of MTA"),
             subtitle="source=Statistics of U.S. Businesses (SUSB)") |> 
  fmt_number(columns = c(nyc, suburban, total),
             scale = 1e-9,
             decimals = 2) |> 
  fmt_percent(columns = nycpct,
              decimals = 1)

```

## Data checks on the MTA

```{r}

mta <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_mta.rds"))
count(mta, firmsize)


mta |> 
  mutate(level = case_when(
    firmsize == "1: Total" &
      naics == "--"                              ~ "1 top level naics by total firms",
    
    firmsize != "1: Total" &
      naics == "--"                              ~ "2 top level naics by firm size",
    
    firmsize == "1: Total" &
      naics != "--" &
      (nchar(naics) ==2 | str_detect(naics, "-")) ~ "3 2-digit naics by total firms",
        
    firmsize != "1: Total" & naics != "--" &
      (nchar(naics) ==2 | str_detect(naics, "-")) ~ "4 2-digit naics by firm sizes",
    
    firmsize == "1: Total" & naics != "--" &
      nchar(naics) == 3                           ~ "5 3-digit naics by total firms",
    
    firmsize != "1: Total" & naics != "--" &
      nchar(naics) == 3                           ~ "6 3-digit naics by firm size",
    
    .default = "ERROR")) |> 
  summarise(n=n(), firms = sum(firms), estabs=sum(estabs), emp=sum(emp), payroll=sum(payroll), .by=level) |> 
  arrange(level)

check <- mta |> 
  mutate(level = case_when(
    firmsize == "1: Total" &
      naics == "--"                              ~ "level1",
    firmsize != "1: Total" &
      naics == "--"                              ~ "level2",
    firmsize == "1: Total" &
      naics != "--" &
      (nchar(naics) ==2 | str_detect(naics, "-")) ~ "level3",
    firmsize != "1: Total" & naics != "--" &
      (nchar(naics) ==2 | str_detect(naics, "-")) ~ "level4",
    firmsize != "1: Total" & naics != "--" &
      nchar(naics) == 3 ~ "level5",
    .default = "other")) |> 
  filter(level=="other")


```
