---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Data

Plan:

-   Get 2021 SUSB data for counties in the MTA region, which have number of firms, estabs, employment, and payroll by broad firm size groups, measured by employees

-   Get 2021 SUSB data for US and the states, which have number of firms, estabs, employment, and payroll by detailed firm size groups, measured by employees

-   Use the US-state data to expand the MTA data to more detailed firm size groups

-   Get QCEW data for the MTA region, which has employment and payroll by detailed firm size groups, measured by employees

```{r}
#| label: setup
#| output: false

source(here::here("R", "libraries.r"))
source(here::here("R", "libraries_ts.r"))
source(here::here("R", "constants.r"))
source(here::here("R", "functions.r"))

library(zip)
library(lobstr)

```

## Get latest Statistics of U.S. Businesses (SUSB) -- 2021

SUSB links

-   https://www.census.gov/data/tables/2021/econ/susb/2021-susb-annual.html
-   https://www.census.gov/programs-surveys/susb/technical-documentation.html
-   https://www.census.gov/programs-surveys/susb/technical-documentation/methodology.html
-   http://www.census.gov/programs-surveys/susb/about/glossary.html
-   https://www2.census.gov/programs-surveys/susb/tables/2021/county_3digitnaics_2021.xlsx
-   https://www.census.gov/data/datasets/2021/econ/susb/2021-susb.html csv files, but not at the county level

D Withheld to avoid disclosing data for individual companies; data are included in higher level totals

G Low noise; cell value was changed by less than 2 percent by the application of noise

H Moderate noise; cell value was changed by 2 percent or more but less than 5 percent by the application of noise

J High noise; cell value was changed by 5 percent or more by the application of noise

S Withheld because estimate did not meet publication standards N Not available or not comparable

### Read SUSB US-state detailed data from Excel and save

```{r}
#| label: get-susb-us-state
#| output: false
#| eval: false

# https://www2.census.gov/programs-surveys/susb/tables/2021/us_state_naics_detailedsizes_2021.xlsx
fname <- "us_state_naics_detailedsizes_2021.xlsx"
susbdetail <- read_excel(fs::path(PDRAW, "susb", fname), skip=2)
glimpse(susbdetail)
# sizelb <- c("1" = 0, "2" = 0, "3" = 20, "4" = 100, "5" = 500)
# sizeub <- c("1" = Inf, "2" = 19, "3" = 99, "4" = 499, "5" = Inf)
# cbind(sizelb, sizeub)

susbdtl2 <- susbdetail |> 
  select(statefips=1,
         state=2,
         naics=3,
         description=4,
         firmsize=5,
         firms=6,
         estabs=7,
         emp=8,
         empnoise=9,
         payroll=10,
         paynoise=11) |> 
  mutate(payroll=payroll * 1000,
         fscode = str_sub(firmsize, 1, 2))

eststubs <- susbdtl2 |> 
  select(fscode, firmsize) |> 
  distinct() |> 
  # get upper and lower bounds
  mutate(
    fslb = case_when(
    fscode == "01" ~ "0",
    str_detect(firmsize, coll("<")) ~ "0", 
    str_detect(firmsize, coll("-")) ~ str_extract(firmsize, "[0-9,]+(?=\\-)"),
    str_detect(firmsize, coll("+")) ~ str_extract(firmsize, "[0-9,]+(?=\\+)"),
    .default = "00"),
    
    fsub = case_when(
    fscode == "01" ~ "Inf",
    str_detect(firmsize, coll("<")) ~ str_extract(firmsize, "(?<=<)\\d{1,3}(?:,\\d{3})*"),
    str_detect(firmsize, coll("-")) ~ str_extract(firmsize, "(?<=-)\\d{1,3}(?:,\\d{3})*"),
    str_detect(firmsize, coll("+")) ~ "Inf",
    .default = "00"),
    
    fslb = as.numeric(str_remove_all(fslb, ",")),
    fsub = as.numeric(str_remove_all(fsub, ",")))
eststubs

susbdtl3 <- susbdtl2 |> 
  left_join(eststubs |> select(-firmsize), by=join_by(fscode))

saveRDS(susbdtl3, fs::path(PDINTERMEDIATE, "susb2021_usstate_details.rds"))

```

### Read and save MTA subset of the county SUSB data

```{r}
#| label: susb-mta
#| output: false

fname <- "county_3digitnaics_2021.xlsx"
susb1 <- read_excel(fs::path(PDRAW, "susb", fname), skip=2)
glimpse(susb1)

# mappings for lower and upper bounds of firm size
sizelb <- c("1" = 0, "2" = 0, "3" = 20, "4" = 100, "5" = 500)
sizeub <- c("1" = Inf, "2" = 19, "3" = 99, "4" = 499, "5" = Inf)
cbind(sizelb, sizeub)

susb2 <- susb1 |> 
  select(statefips=1,
         state=2,
         cofips=3,
         county=4,
         naics=5,
         description=6,
         firmsize=7,
         firms=8,
         estabs=9,
         emp=10,
         empnoise=11,
         payroll=12,
         paynoise=13) |> 
  mutate(payroll=payroll * 1000,
         fscode = str_sub(firmsize, 1, 1),
         fslb = sizelb[fscode],
         fsub = sizeub[fscode],
         fscode = as.integer(fscode))

glimpse(susb2)
count(susb2, fscode, firmsize, fslb, fsub) # note that we do not have the same number of recs per code!

saveRDS(susb2, fs::path(PDINTERMEDIATE, "susb2021_raw.rds"))

susb <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_raw.rds"))

susb |> 
  filter(state=="New York") |> 
  count(cofips, county)

mta <- susb |> 
  filter(state=="New York", paste0(statefips, cofips) %in% constants$mtafips) |> 
  mutate(mta=TRUE, nyc=paste0(statefips, cofips) %in% constants$nycfips)

count(mta, nyc, county)
count(mta, naics, description)

saveRDS(mta, fs::path(PDINTERMEDIATE, "susb2021_mta.rds"))

```

### Fill in SUSB data and create shares

```{r}
#| label: fill-susb
#| output: false

mta <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_mta.rds"))

check <- mta |> 
  mutate(lnaics = ifelse(naics == "--", 1, nchar(naics))) |>
  count(lnaics, naics, description)

# do the level 2 codes add to the level one codes
check <- mta |> 
  filter(county=="Bronx", fscode==1) |> 
  mutate(lnaics = ifelse(naics == "--", 1, nchar(naics))) |> 
  # mutate(lnaics = ifelse(lnaics==5, 2, lnaics)) |>
  summarise(firms=sum(firms),
            estabs=sum(estabs),
            emp=sum(emp),
            payroll=sum(payroll),
            .by=c(lnaics, firmsize))

check <- mta |> 
  filter(county=="Bronx", fscode==1) |> 
  mutate(lnaics = ifelse(naics == "--", 1, nchar(naics))) |> 
  write.xlsx(fs::path(PDSCRATCH, "susb2021_bronx.xlsx"))


check <- mta |> 
  summarise(n=n(), .by=c(cofips, county, naics, description))


# create shares by county and naics
costubs <- mta |> 
  select(statefips, cofips, county, mta, nyc) |> 
  distinct() # 12

naicsstubs <- mta |> 
  select(naics, description) |> 
  distinct() # 105

fsstubs <- mta |> 
  select(fscode, firmsize, fslb, fsub) |> 
  distinct() # 5

stubs <- crossing(costubs, naicsstubs, fsstubs) # 12 x 105 x 5 = 6,300

full <- stubs |> 
  left_join(mta |> select(-c(state, county, mta, nyc)),
            by = join_by(statefips, cofips, naics, description, fscode, firmsize, fslb, fsub)) |> 
  arrange(statefips, cofips, county, naics, description, fscode, firmsize, fslb, fsub)

shares <- full |> 
  select(-c(empnoise, paynoise)) |> 
  # drop all groups where total is zero
  mutate(drop = is.na(firms[fscode==1]),
         .by=c(statefips, cofips, naics)) |>
  filter(!drop) |> 
  select(-drop) |> 
  filter(fscode != 1) |> 
  # even though some NAs aren't zero, replace them all
  mutate(across(c(firms, estabs, emp, payroll), \(x) replace_na(x, 0))) |> 
  # now, shares
  mutate(across(c(firms, estabs, emp, payroll), 
                \(x) x / sum(x)),
         .by=c(statefips, cofips, naics)) 

full |> filter(cofips=="005", naics=="335")

check <- shares |> 
  summarise(across(c(firms, estabs, emp, payroll), 
                \(x) sum(x)),
            .by=c(statefips, cofips, county, naics, description))
  
summary(check)
# drop the few records where totals are low and all details are NA
drops <- check |> 
  filter(is.na(firms)) |> 
  select(statefips, cofips, naics)

shares2 <- shares |> 
  left_join(drops |> 
              mutate(bad=TRUE),
            by = join_by(statefips, cofips, naics)) |> 
  filter(is.na(bad)) |> 
  select(-bad)

avgpayroll <- full |> 
  filter(fscode != 1) |> 
  select(county, naics, description, firms, payroll, firmsize) |> 
  mutate(avgpayroll = payroll / firms) |>
  arrange(desc(avgpayroll)) |> 
  filter(!is.na(avgpayroll))

avgpayroll |> 
  filter(avgpayroll >= 1.5e6) |> 
  count(firmsize)

avgpayroll |> 
  filter(avgpayroll >= 1.5e6) |> 
  count(firmsize)

avgpayroll |> 
  summarise(n=n(), 
            mean=mean(avgpayroll),
            .by=firmsize)


```

### SUSB firm size groupings

SUSB county groupings

1: Total

2: \<20 employees

3: 20-99 employees

4: 100-499 employees

5: 500+ employees

SUSB MSA groupings

1: Total

2: \<5 employees

3: 5-9 employees

4: 10-19 employees

5: \<20 employees

6: 20-99 employees

7: 100-499 employees

8: \<500 employees

9: 500+ employees

SUSB detailed US and states

01: Total

02: \<5 employees

03: 5-9 employees

04:10-14 employees

05: 15-19 employees

06: \<20 employees

**07: 20-24 employees**

**08: 25-29 employees**

**09: 30-34 employees**

**10: 35-39 employees**

**11: 40-49 employees**

**12: 50-74 employees**

**13: 75-99 employees**

**14: 100-149 employees**

**15: 150-199 employees**

**16: 200-299 employees**

**17: 300-399 employees**

**18: 400-499 employees**

**19: \<500 employees**

**20: 500-749 employees**

**21: 750-999 employees**

**22: 1,000-1,499 employees**

**23: 1,500-1,999 employees**

**24: 2,000-2,499 employees**

**25: 2,500-4,999 employees**

**26: 5,000+ employees**

we need to break apart the 20-99 group

CBP breaks it into 20-49 and 50-99

do that and then use a spline

### Explore 2021 SUSB data for the MTA region

What share of total MTA wages does NYC have by size of firm?

(A quick-and-dirty analysis for the MTA.)

```{r}
#| label: explore-mta

mta <- readRDS(fs::path(PDINTERMEDIATE, "susb2021_mta.rds"))

mta |> 
  filter(naics=="--") |> 
  select(county, firmsize, firms, estabs, emp, payroll) |> 
  mutate(fe=firms / estabs,
         emppay = payroll / emp,
         avgfirmpay = payroll / firms) |>
  mutate(paypct = payroll / payroll[firmsize == "1: Total"],
         .by=county) |> 
  relocate(fe,.after = firmsize) |> 
  arrange(firmsize, county) |> 
  gt() |> 
  fmt_number(columns = c(4:9),
             decimals = 0) |> 
  fmt_percent(columns = paypct,
              decimals = 1)



nycshare <- mta |> 
  filter(naics=="--") |> 
  summarise(across(c(firms, estabs, emp, payroll), sum),
            .by=c(nyc, firmsize)) |> 
  mutate(nyc=ifelse(nyc, "nyc", "suburban"),
         qfirmpay=(payroll / firms) / 4,
         avgpay=payroll / emp)

nycshare |> 
  select(nyc, firmsize, qfirmpay) |> 
  pivot_wider(names_from = nyc, values_from = qfirmpay) |> 
  gt() |> 
  tab_header(html("Average MTA <strong>quarterly</strong> firm payroll by firm size in 2021, <strong>dollars</strong>"),
             subtitle="source=Statistics of U.S. Businesses (SUSB)") |> 
  fmt_number(columns = c(nyc, suburban),
             decimals = 0)

nycshare |> 
  select(firmsize, payroll, nyc) |> 
  pivot_wider(names_from = nyc, values_from = payroll) |> 
  mutate(total=nyc + suburban,
         nycpct=nyc / total) |> 
  gt() |> 
  tab_header(html("Total MTA payroll by firm size in 2021, $ billions, and NYC share of MTA"),
             subtitle="source=Statistics of U.S. Businesses (SUSB)") |> 
  fmt_number(columns = c(nyc, suburban, total),
             scale = 1e-9,
             decimals = 2) |> 
  fmt_percent(columns = nycpct,
              decimals = 1)

# cumulative  
nycshare |> 
  select(firmsize, payroll, nyc) |> 
  filter(!str_starts(firmsize, "1: Total")) |> 
  arrange(nyc, desc(firmsize)) |> 
  mutate(payroll=cumsum(payroll), .by=nyc) |> 
  pivot_wider(names_from = nyc, values_from = payroll) |> 
  arrange(firmsize) |> 
  mutate(total=nyc + suburban,
         nycpct=nyc / total) |> 
  gt() |> 
  tab_header(html("<strong>Reverse cumulative</strong> MTA payroll by firm size in 2021, $ billions, and NYC share of MTA"),
             subtitle="source=Statistics of U.S. Businesses (SUSB)") |> 
  fmt_number(columns = c(nyc, suburban, total),
             scale = 1e-9,
             decimals = 2) |> 
  fmt_percent(columns = nycpct,
              decimals = 1)

```
