---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Fill in QCEW data

The goal of this section is to prepare "atomistic" QCEW data for the MTA region.

By atomistic I mean that each level of ownership, or naics, is a complete subset of the total. 

For ownership, there will be just 2 levels: (1) total, and (2) components consisting of private, federal, state, local, and othergovt (if any).

For naics, there are several levels

-   naics 1 -- the totals across all industries; these are our control totals
-   naics 2 -- we need an all-other category that fills in any amounts not in the details, so that the level 2 numbers sum to the level 1 total
-   naics 3 -- ditto; probably stop here and don't bother with naics 4-6

## Setup

```{r}
#| label: setup
#| include: false

source(here::here("R", "libraries.r"))
source(here::here("R", "libraries_ts.r"))
source(here::here("R", "constants.r"))
source(here::here("R", "functions.r"))

```

## Get QCEW MTA data

```{r}
#| label: get-data
#| output: false

owner_factors <- read_csv(fs::path(PDINTERMEDIATE, "owner_factors.csv"))
qcew_mta <- readRDS(fs::path(PDINTERMEDIATE, "qcew_mta.rds"))

glimpse(qcew_mta)
count(qcew_mta, ownerf, owner)

qcew_mta |> 
  filter(nyc, year==2023, naics_level==1)

```

## Fill in ownership levels and data

Work in progress...

Figure out how to do fillin ....

```{r}
#| label: fill-ownership
#| output: false

# are there any count-naics codes that don't have owner1 (total)?
# yes, plenty but all have at least one other value
qcew_mta |> 
  select(county, naics, year, ownerf) |> 
  mutate(n=n(), .by=c(county, naics, year, ownerf)) |> 
  pivot_wider(names_from = ownerf, values_from = "n", values_fill = 0) |> 
  filter(`1` == 0) |> # yes, quite a few
  mutate(sum = rowSums(across(-c(county, naics, year)))) |> 
  arrange(sum)

# are there any count-naics codes that don't have owner3 (total government)?
# yes, plenty but all have at least one other value

qcew_mta |> 
  filter(ownerf %in% 3:6) |> 
  select(county, naics, year, ownerf) |> 
  mutate(n=1, .by=c(county, naics, year, ownerf)) |> 
  pivot_wider(names_from = ownerf, values_from = "n", values_fill = 0) |> 
  filter(`3` == 0) |> # yes, quite a few
  mutate(sum = rowSums(across(-c(county, naics, year)))) |> 
  arrange(sum)

# do column sums for govt = sums of fed, state, local when avail?
#   we can have govt sum when we don't have any indiv govt levels
qcew_mta |> 
  filter(year==2023) |> 
  filter(ownerf %in% 3:6) |> 
  select(county, naics, title, year, ownerf, totwage) |> 
  pivot_wider(names_from = ownerf, values_from = "totwage", values_fill = 0) |> 
  filter(`3` != 0) |>
  mutate(sum = rowSums(across(-c(`3`, county, naics, title, year))),
         diff = `3` - sum) |> 
  arrange(desc(abs(diff)))

qcew_mta |> filter(year==2023, naics==92, county=="New York County")

# we have total, private, totgov, and fed, but not state and local even though much wage is there
qcew_mta |> filter(year==2023, naics==48, county=="New York County") 

# so -- create total gov as either reported or sum if not, then other gov as total - fed - state - local

# repeat for total, private maybe always adds?

# keep atoms
# make sure atoms add to totals

# we're going to drop annavgsal so make sure it can be computed from the details
qcew_mta |> 
  select(county, year, owner, totwage, avgemp, annavgsal) |> 
  mutate(avg=totwage / avgemp,
         diff=avg - annavgsal) |> 
  filter(abs(diff) > 1)
# good, calc amount is within $1 of reported

owner_filled1 <- qcew_mta |> 
  select(-c(owner, ownerf, annavgsal)) |> 
  pivot_longer(c(estab, avgemp, totwage),
               names_to = "variable") |> 
  pivot_wider(names_from = ownershort, values_fill = 0)

owner_filled1

bad <- owner_filled1 |> 
  filter(privown==0, totgovown==0)
count(bad, year) # ~ 4.5k per year / 3 variables --> ~ 50 per year
count(bad, naics_level) # all are 2 and 3, NONE are level 1
bad |> 
  summarise(across(totown:localgovown, \(x) sum(x)), .by=variable)
# we have values for fedgovown, stategovown, localgovown, but none for totgovown or privown
bad |> filter(if_all(privown:localgovown, ~ . == 0)) # 1704 rows of 2055 are ALL bad
bad |> filter(!if_all(privown:localgovown, ~ . == 0)) # 351 rows

# look at an example

owner_filled1 |> filter(county=="Bronx County", year==2021, naics==92) # level 2
owner_filled1 |> filter(county=="Bronx County", year==2021, naics_level==1)

fixpriv <- function(totown, privown, totgovown){
  privown_original = privown
  privown <- case_when(totown != 0 &
                          (totown > totgovown) ~ totown - totgovown,
                         .default = privown_original)
  privflag = privown != privown_original
  tbl <- tibble(privown, privflag, privown_original)
  return(tbl)
}


fixtotgov <- function(totown, privown, totgovown, fedgovown, stategovown, localgovown){
  totgovown_original <- totgovown
  govdetail <- fedgovown + stategovown + localgovown
  totgovown <- pmax(totgovown_original, govdetail)
  
  govother <- totgovown - govdetail
  govflag <- 
    (totgovown > totgovown_original) | # details were greater than reported total so force add
    (govother > 0) # details did not add up to total so put into other category
  tbl <- tibble(totgovown, govother, govflag, totgovown_original)
  return(tbl)
}

fixtotpriv <- function(totown, privown, totgovown){
  totown_original <- totown
  privown_original <- privown
  privgovsum <- privown + totgovown
  
  totown <- pmax(totown_original, privgovsum)
  privown <- totown - totgovown
  
  totflag <- totown != totown_original
  privflag <- privown != privown_original
  
  tbl <- tibble(totown, privown, totown_original, privown_original, totflag, privflag)
  return(tbl)
}

owner_filled2 <- owner_filled1 |> 
  mutate(fixtotgov(totown, privown, totgovown, fedgovown, stategovown, localgovown)) |> 
  mutate(fixtotpriv(totown, privown, totgovown))

skim(owner_filled2) # govflag 7742 obs, privflag 6457

owner_filled2 |> filter(govflag)
owner_filled2 |> filter(privflag)
owner_filled2 |> filter(totflag)

owner_filled2 |> filter(govflag & govother > 0) |> select(-c(nyc, mta, totown, privown, privown_original, privflag)) # 6777
owner_filled2 |> filter(govflag & govother == 0) |> select(-c(nyc, mta, totown, privown, privown_original, privflag)) # 965
owner_filled2 |> filter(totgovown == 0)

tmp <- owner_filled2 |> 
  filter(county=="Bronx County", year==2022, naics=="48")

# good 0 recs
owner_filled2 |> 
  filter(totown != privown + totgovown) |> 
  select(county, year, title, variable, totown, privown, totgovown, totown_original, privown_original)

# good 0 recs
owner_filled2 |> 
  filter(totgovown != fedgovown + stategovown + localgovown + govother) |> 
  select(county, year, title, variable, totgovown, fedgovown, stategovown, localgovown, govother)

# good 0 recs
owner_filled2 |> 
  filter(totown != privown + fedgovown + stategovown + localgovown + govother) |> 
  select(county, year, title, variable, totown, privown, fedgovown, stategovown, localgovown, govother)

owner_filled2 |> 
  filter(privown != privown_original) |> 
  select(county, year, title, variable, totown, privown, fedgovown, stategovown, localgovown, govother, privown_original, totown_original)

saveRDS(owner_filled2, fs::path(PDINTERMEDIATE, "owner_filled.rds"))

```

## Fill in naics levels and data
