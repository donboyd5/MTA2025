
# Potential revenue impact

Key dates:

-   January 15, 2019 State Tax Department notes informing vindors with no physical presence that they must register

-   June 1, 2019 Internet Marketplace Act applies to sales


```{r}
#| label: setup
#| output: false

# source(here::here("r", "libraries.r"))
# source(here::here("r", "libraries_ts.r"))
# source(here::here("r", "constants.r"))
# source(here::here("r", "functions.r"))

library(tidyverse)
library(readxl)
library(vroom)
library(fs)
library(btools)
library(bggtools)

tprint <- 75  # default tibble print
options(tibble.print_max = tprint, tibble.print_min = tprint) # show up to tprint rows

ddir <- here::here("data")

fname <- "Taxable_Sales_And_Purchases_Quarterly_Data__Beginning_Sales_Tax_Year_2013-2014_dl20250128.csv"
fpath <- fs::path(ddir, fname)

```


```{r}
#| label: download-taxable-sales-and-purchases
#| eval: false
#| output: false

# ok to download the file manually as it doesn't seem easy to get a direct link, but code below should work
# landing: https://data.ny.gov/Government-Finance/Taxable-Sales-And-Purchases-Quarterly-Data-Beginni/ny73-2j3u/data
url <- "https://data.ny.gov/api/views/ny73-2j3u/rows.csv?accessType=DOWNLOAD&sorting=true" 
fnbase <- "Taxable_Sales_And_Purchases_Quarterly_Data__Beginning_Sales_Tax_Year_2013-2014.csv"
fname1 <- paste0(fs::path_ext_remove(fnbase), "_dl", format(Sys.Date(), "%Y%m%d"), ".csv")
fpath1 <- fs::path(ddir, fname1)
system.time(download.file(url, fpath1, mode="wb")) # 32 secs

```


```{r}
#| label: get-taxable-sales-and-purchases
#| eval: false
#| output: false

# clean and save taxable sales and purchases data, full details ----------------------------------------------------------

# https://data.ny.gov/Government-Finance/Taxable-Sales-And-Purchases-Quarterly-Data-Beginni/ny73-2j3u/data
# Status,Sales Tax Year,Selling Period,Sales Tax Quarter,Jurisdiction,
# NAICS Industry Group,Description,Taxable Sales and Purchases,
# Jurisdiction Sort Order,Row Update Indicator
# fn <- "Taxable_Sales_And_Purchases_Quarterly_Data__Beginning_Sales_Tax_Year_2013-2014.csv"

df <- vroom(fpath)
glimpse(df)

df2 <- df |> 
  setNames(c("status", "styear", "stperiod", "stqtr", "govt", 
             "naics", "fnaics", "txblsales", "govtsort", "rowind"))

cbind(names(df2), names(df))

count(df2, status) # F, P  Status of Data: P = Preliminary, subject to revision; F = Final
count(df2, styear) # 2014-2025(partial) Sales Tax Year: from March 1 to February 28/29
count(df2 |> filter(styear == "2024 - 2025"), stqtr, stperiod) # q1-q3 only end Nov 2024
count(df2, stqtr, stperiod)
count(df2, govt, govtsort) # 60 -- all caps, includes NY CITY, NY STATE, MCTD -- so 57 + 3
count(df2, naics, fnaics) |> ht() # ~ 327, does not appear to be a total!
tmp <- count(df2, naics, fnaics)
count(df2, govtsort, govt) # 1=NY STATE, 2=MCTD, 32=NY CITY

# xwalkny
# clean: put date and uniname on the file
# for date, use the first day of the calendar quarter in which the sales tax
#  quarter has the greatest number of months -- see notes below
# this assumes that the sales quarter is most closely aligned with economic
# activity of the largely ovelapping calendar quarter

mtacos <- c("New York City", "Dutchess", "Nassau", "Orange", "Putnam", "Rockland", "Suffolk", "Westchester")
df3 <- df2 |> 
  select(status, styear, stqtr, stperiod, govtsort, govt, naics, fnaics, txblsales) |> 
  mutate(styear1=str_sub(styear, 1, 4) |> as.numeric(),
         stqmonth1=factor(stqtr, levels=1:4, labels=c(3, 6, 9, 12)) |> as.character(),
         calqtr=ifelse(as.integer(stqtr)==4, 1, as.integer(stqtr) + 1),
         year=ifelse(calqtr==1, styear1 + 1, styear1), # see above
         date=yq(paste0(year, ".", calqtr)),
         stdate=paste0(styear1, "-", stqmonth1, "-", 1) |> as.Date(),
         uniname=case_when(govt=="NY STATE" ~ "New York State",
                           govt=="NY CITY" ~ "New York City",
                           govt=="MCTD" ~ "MCTD",
                           govt=="ST LAWRENCE" ~ "St. Lawrence",
                           TRUE ~ str_to_title(govt))
         ) |> 
  mutate(mtacounty = case_when(uniname %in% mtacos ~ TRUE,
                               .default = FALSE)) |> 
  select(-c(styear1, calqtr, year), stqmonth1)

# left_join(xwalkny |> select(unifips, uniname, mta_all), by="uniname")

glimpse(df3)
count(df3, govtsort, uniname, govt)
count(df3 |> filter(mtacounty), govtsort, uniname, govt)

count(df3, date, stdate, styear, stqtr, stperiod)

saveRDS(df3, path(ddir, "tsp_detail.rds"))

```



```{r}
#| label: prep
#| output: false

df1 <- readRDS(path(ddir, "tsp_detail.rds"))
glimpse(df1)
summary(df1)

src1 <- "Source: New York State Department of Taxation and Finance"
src2 <- "Taxable Sales And Purchases Quarterly Data: Beginning Sales Tax Year 2013-2014"
src_note <- paste0(src1, ", ", src2)

subt1 <- "NAICS 4541 Electronic Shopping and Mail-Order Houses"
subt2 <- "\nEach point is first month of a sales tax quarter. Quarters start in March, June, September, & December"
subt <- paste0(subt1, ".  ", subt2)

format_dates <- function(x) {
  # months <- strftime(x, format = "%b")              # Abbreviated name of the month.
  # years <- lubridate::year(x)  # Year as a 4-digit number.
  case_when(month(x)==0 ~ paste(lubridate::year(x), 
                                strftime(x, format = "%b"), 
                                sep = "-"),
            month(x)==1 ~ lubridate::year(x) |> as.character(),
            month(x) %in% c(3, 6, 9, 12) ~ strftime(x, format = "%b"),
            TRUE ~ "")
}

dates1 <- seq(as.Date("2010-01-01"), as.Date("2030-01-01"), by="years")
dates2 <- seq(as.Date("2013-03-01"), as.Date("2030-03-01"), by="3 months")
dates <- c(dates1, dates2) |> sort()
dates
# format_dates(dates)

title <- "New York City Internet-Related Quarterly Taxable Sales Before and After Internet Marketplace Act (June 1, 2019)"
pinternet <- df1 |>
  filter(naics==4541, uniname=="New York City") |>
  select(stdate, txblsales) |>
  ggplot(aes(stdate, txblsales)) +
  # lines to replace the grid
  geom_vline(xintercept=dates1, colour="grey90") +
  geom_vline(xintercept=dates2, colour="grey98") +
  geom_line(colour="blue") +
  geom_point(colour="blue") +
  geom_vline(xintercept=as.Date("2019-06-01"), linetype="dashed") +
  scale_x_date(name=NULL, breaks = dates, labels = format_dates) +
  scale_y_continuous(name="Taxable sales in the quarter ($ millions)",
                     breaks=seq(0, 4e9, 350e6),
                     labels = scales::comma_format(scale=1e-6)) +
  ggtitle(title, subtitle = subt) +
  labs(caption = src_note) +
  theme_bw() +
  caption_left + 
  theme(axis.text.x = element_text(angle = -90, vjust = 0, hjust=0)) +
  # remove vertical grid because we replaced it above
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
pinternet

pall <- df1 |>
  filter(uniname=="New York City") |>
  group_by(date) |> 
  summarise(txblsales=sum(txblsales, na.rm=TRUE), .groups="drop") |> 
  ggplot(aes(date, txblsales)) +
  geom_line(colour="blue") +
  geom_point(colour="blue") +
  geom_vline(xintercept=as.Date("2019-06-01"), linetype="dashed") +
  scale_x_date(name=NULL, date_breaks = "years", date_labels = "%Y") +
  scale_y_continuous(name="Taxable sales in the quarter ($ billions)",
                     breaks=seq(0, 60e9, 2.5e9),
                     labels = scales::comma_format(scale=1e-9)) +
  ggtitle("New York City Total Taxable Sales Before and After Changes in Internet Laws (June 1, 2019)") +
  labs(caption = src_note) +
  theme_bw() +
  caption_left
pall

p9999 <- df1 |>
  filter(naics==9999, uniname=="New York City") |>
  select(stdate, txblsales) |>
  ggplot(aes(stdate, txblsales)) +
  # lines to replace the grid
  geom_vline(xintercept=dates1, colour="grey90") +
  geom_vline(xintercept=dates2, colour="grey98") +
  geom_line(colour="blue") +
  geom_point(colour="blue") +
  geom_vline(xintercept=as.Date("2019-06-01"), linetype="dashed") +
  scale_x_date(name=NULL, breaks = dates, labels = format_dates) +
  scale_y_continuous(name="Taxable sales in the quarter ($ millions)",
                     breaks=seq(0, 4e9, 350e6),
                     labels = scales::comma_format(scale=1e-6)) +
  ggtitle(title, subtitle = subt) +
  labs(caption = src_note) +
  theme_bw() +
  caption_left + 
  theme(axis.text.x = element_text(angle = -90, vjust = 0, hjust=0)) +
  # remove vertical grid because we replaced it above
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
p9999

```


```{r}
#| label: internet

pinternet
```


```{r}
#| echo: false
knitr::knit_exit()  # Stops rendering here
```



From TSP metadata; so look at 999:

The North American Industry Classification System (NAICS) four-digit industry group code, including unclassified. Beginning with sales tax year 2022-23, the NAICS industry group uses the 2022 NAICS codes. Vendors in codes that were eliminated in the Census Bureauâ€™s 2022 update are considered unclassified (9999) until assigned a new code. For sales tax years 2016-17 through 2021-22, the NAICS industry group uses the 2017 NAICS codes. Prior to sales tax year 2016-2017, the NAICS industry group uses the 2012 NAICS codes with the following industries reported only at the three-digit level: 3130, 3140, 4810, 4870, 5620, 6110, 6220, 6230.


2017 North American Industry Classification System (NAICS)

NAICS 4541 This industry comprises establishments primarily engaged in retailing all types of merchandise using nonstore means, such as catalogs, toll free telephone numbers, or electronic media, such as interactive television or the Internet. Included in this industry are establishments primarily engaged in retailing from catalog showrooms of mail-order houses. (See [this](https://www.census.gov/naics/reference_files_tools/2017_NAICS_Manual.pdf).)

Taxable Sales And Purchases Quarterly Data: Beginning Sales Tax Year 2013-2014
Government & Finance
These statistics come from more than three million data items reported on about 250,000 sales tax returns filed quarterly and on about 300,000 returns filed annually. The dataset categorizes quarterly sales and purchases data by industry group using the North American Industry Classification System. The status of data will change as preliminary data becomes final.



```{r}
#| label: test-get-data
#| eval: false
#| output: false

# not really useful ----

library(httr)

# URL from the export function
url <- "https://data.ny.gov/api/views/ny73-2j3u/rows.csv?accessType=DOWNLOAD&sorting=true"

response <- GET(url, config(nobody = TRUE))  # "nobody=TRUE" fetches headers only
stop_for_status(response)

headers <- headers(response)
content_disposition <- headers$`content-disposition`

# If header exists, extract filename
if (!is.null(content_disposition)) {
  filename <- regmatches(
    content_disposition,
    regexpr('filename=([^;\\n"]+)', content_disposition, ignore.case = TRUE)
  )[[1]]
  filename <- gsub('filename=|\"|\\s', '', filename)
} else {
  # Fallback: Construct filename from metadata or URL
  filename <- "fallback_filename.csv"
}

# code below did not work ----
# Step 1: Send a HEAD request to get headers (no content)
response_head <- HEAD(url)
stop_for_status(response_head)  # Ensure the request succeeded

# Step 2: Extract the filename from the 'Content-Disposition' header
headers <- headers(response_head)
content_disposition <- headers$`content-disposition`

if (!is.null(content_disposition)) {
  # Extract filename using regex (handles quoted and unquoted filenames)
  filename <- regmatches(
    content_disposition,
    regexpr('filename=["\']?([^"\']+)["\']?', content_disposition)
  )[[1]]
  filename <- gsub('filename=|\"|\'', '', filename)  # Clean up
} else {
  # Fallback: Use a default name if header is missing
  filename <- "downloaded_file.csv"
}

# Step 3: Download the file with the extracted filename
response_get <- GET(
  url,
  write_disk(filename, overwrite = TRUE)  # Saves directly to disk
)
stop_for_status(response_get)

message(sprintf("File saved as: %s", filename))

```

